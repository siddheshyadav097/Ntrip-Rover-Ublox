<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\vts_dubai\vts_dubai.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\vts_dubai\vts_dubai.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Wed Feb 28 15:45:30 2024
<BR><P>
<H3>Maximum Stack Usage =        800 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; PacketHandler &rArr; PacketTask &rArr; checkWhetherToPacketSendOrSave &rArr; AISGetPacketChecksum &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_COMP_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[4f]">ADC_DMAConvCplt</a> from stm32g0xx_hal_adc.o(.text.ADC_DMAConvCplt) referenced from stm32g0xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[4d]">ADC_DMAError</a> from stm32g0xx_hal_adc.o(.text.ADC_DMAError) referenced from stm32g0xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[4e]">ADC_DMAHalfConvCplt</a> from stm32g0xx_hal_adc.o(.text.ADC_DMAHalfConvCplt) referenced from stm32g0xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[31]">CEC_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel1_IRQHandler</a> from stm32g0xx_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[18]">EXTI0_1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[19]">EXTI2_3_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_15_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[3f]">FtpDownloadCompleteCb</a> from fota_api.o(.text.FtpDownloadCompleteCb) referenced from fota_api.o(.text.FotaHandler)
 <LI><a href="#[40]">FtpFileReadByteCb</a> from fota_api.o(.text.FtpFileReadByteCb) referenced 2 times from fota_api.o(.text.FotaHandler)
 <LI><a href="#[0]">FtpOkRespCb</a> from gsm_ftp_api.o(.text.FtpOkRespCb) referenced 12 times from gsm_ftp_api.o(.data.ftpCmdList)
 <LI><a href="#[1]">FtpProcessRespCb</a> from gsm_ftp_api.o(.text.FtpProcessRespCb) referenced 12 times from gsm_ftp_api.o(.data.ftpCmdList)
 <LI><a href="#[3c]">GSMLedStatusCb</a> from ais_app.o(.text.GSMLedStatusCb) referenced from ais_app.o(.text.AisAppInit)
 <LI><a href="#[41]">GprsDeactivateCmdCb</a> from gsm_gprs_api.o(.text.GprsDeactivateCmdCb) referenced from gsm_gprs_api.o(.text.GprsDeactivationHandler)
 <LI><a href="#[2]">GprsOkRespCb</a> from gsm_gprs_api.o(.text.GprsOkRespCb) referenced 4 times from gsm_gprs_api.o(.data.gprsInitCmdList)
 <LI><a href="#[50]">GpsUartReceiveDataCb</a> from gps_api.o(.text.GpsUartReceiveDataCb) referenced from gps_port.o(.text.InitGPS)
 <LI><a href="#[43]">GsmCREGHandlerCb</a> from gsm_statemachine.o(.text.GsmCREGHandlerCb) referenced from gsm_statemachine.o(.text.GsmCheckRegistrationHandler)
 <LI><a href="#[4]">GsmCcidImeiRespCb</a> from gsm_init_cmd.o(.text.GsmCcidImeiRespCb) referenced 4 times from gsm_init_cmd.o(.data.gsmInitCmdList)
 <LI><a href="#[58]">GsmDateTimeRespCb</a> from gsm_idle_task.o(.text.GsmDateTimeRespCb) referenced from gsm_idle_task.o(.rodata.gsmPollCmdList)
 <LI><a href="#[44]">GsmFileRespCb</a> from gsm_ufs.o(.text.GsmFileRespCb) referenced from gsm_ufs.o(.text.GsmFileAtCmdHandler)
 <LI><a href="#[56]">GsmListSMSRespCb</a> from gsm_idle_task.o(.text.GsmListSMSRespCb) referenced from gsm_idle_task.o(.rodata.gsmPollCmdList)
 <LI><a href="#[3]">GsmOkRespCb</a> from gsm_init_cmd.o(.text.GsmOkRespCb) referenced 44 times from gsm_init_cmd.o(.data.gsmInitCmdList)
 <LI><a href="#[59]">GsmQSPNHandlerCb</a> from gsm_idle_task.o(.text.GsmQSPNHandlerCb) referenced from gsm_idle_task.o(.rodata.gsmPollCmdList)
 <LI><a href="#[5]">GsmQueryInitCb</a> from gsm_init_cmd.o(.text.GsmQueryInitCb) referenced 2 times from gsm_init_cmd.o(.data.gsmInitCmdList)
 <LI><a href="#[5a]">GsmQueryNwInfoRespCb</a> from gsm_idle_task.o(.text.GsmQueryNwInfoRespCb) referenced from gsm_idle_task.o(.rodata.gsmPollCmdList)
 <LI><a href="#[45]">GsmQueryOpsCb</a> from gsm_statemachine.o(.text.GsmQueryOpsCb) referenced from gsm_statemachine.o(.text.GsmOpsNameHandler)
 <LI><a href="#[46]">GsmRSSIRespCb</a> from gsm_statemachine.o(.text.GsmRSSIRespCb) referenced from gsm_statemachine.o(.text.GsmPollSignalHandler)
 <LI><a href="#[57]">GsmSignalStrengthRespCb</a> from gsm_idle_task.o(.text.GsmSignalStrengthRespCb) referenced from gsm_idle_task.o(.rodata.gsmPollCmdList)
 <LI><a href="#[6]">GsmSimStatusRespCb</a> from gsm_init_cmd.o(.text.GsmSimStatusRespCb) referenced 2 times from gsm_init_cmd.o(.data.gsmInitCmdList)
 <LI><a href="#[47]">GsmSocketCloseCb</a> from gsm_socket_api.o(.text.GsmSocketCloseCb) referenced from gsm_socket_api.o(.text.GsmSocketCloseHandler)
 <LI><a href="#[48]">GsmSocketOpenCb</a> from gsm_socket_api.o(.text.GsmSocketOpenCb) referenced from gsm_socket_api.o(.text.GsmSocketOpenHandler)
 <LI><a href="#[4a]">GsmSocketReadCb</a> from gsm_socket_api.o(.text.GsmSocketReadCb) referenced from gsm_socket_api.o(.text.GsmSocketReadHandler)
 <LI><a href="#[49]">GsmSocketReadFixedLenCb</a> from gsm_socket_api.o(.text.GsmSocketReadFixedLenCb) referenced from gsm_socket_api.o(.text.GsmSocketReadCb)
 <LI><a href="#[4b]">GsmSocketWriteCb</a> from gsm_socket_api.o(.text.GsmSocketWriteCb) referenced from gsm_socket_api.o(.text.GsmSocketWriteHandler)
 <LI><a href="#[4c]">GsmSofShutDownRespCb</a> from gsm_statemachine.o(.text.GsmSofShutDownRespCb) referenced from gsm_statemachine.o(.text.GsmSofShutDownHandler)
 <LI><a href="#[42]">GsmUartReceiveDataCb</a> from gsm_at_handler.o(.text.GsmUartReceiveDataCb) referenced from gsm_at_handler.o(.text.GsmAtHandlerInit)
 <LI><a href="#[f]">HardFault_Handler</a> from stm32g0xx_it.o(.text.HardFault_Handler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2a]">I2C1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2b]">I2C2_3_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from stm32g0xx_it.o(.text.NMI_Handler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[14]">PVD_VDDIO2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from stm32g0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[17]">RCC_CRS_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[15]">RTC_TAMP_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[b]">ReadSmsRespCb</a> from gsm_sms.o(.text.ReadSmsRespCb) referenced 2 times from gsm_sms.o(.data.smsCmdList)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[51]">RfidUartReceiveDataCb</a> from rfid_data_handler.o(.text.RfidUartReceiveDataCb) referenced from rfid_data_handler.o(.text.RfidCmdHandlerInit)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2d]">SPI2_3_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from stm32g0xx_it.o(.text.SVC_Handler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[9]">SendSmsRespCb</a> from gsm_sms.o(.text.SendSmsRespCb) referenced 2 times from gsm_sms.o(.data.smsCmdList)
 <LI><a href="#[a]">SmsOkRespCb</a> from gsm_sms.o(.text.SmsOkRespCb) referenced 2 times from gsm_sms.o(.data.smsCmdList)
 <LI><a href="#[a]">SmsOkRespCb</a> from gsm_sms.o(.text.SmsOkRespCb) referenced 2 times from gsm_sms.o(.data.smsReadList)
 <LI><a href="#[3d]">SmsReceiveCb</a> from ais_app.o(.text.SmsReceiveCb) referenced from ais_app.o(.text.AisAppInit)
 <LI><a href="#[c]">SslOkRespCb</a> from gsm_ssl_config.o(.text.SslOkRespCb) referenced 8 times from gsm_ssl_config.o(.data.sslConfigCmdList)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32g0xx_it.o(.text.SysTick_Handler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[32]">SystemInit</a> from system_stm32g0xx.o(.text.SystemInit) referenced from startup_stm32g0b1xx.o(.text)
 <LI><a href="#[26]">TIM14_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[27]">TIM15_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[28]">TIM16_FDCAN_IT0_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[29]">TIM17_FDCAN_IT1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[20]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[23]">TIM3_TIM4_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[24]">TIM6_DAC_LPTIM1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[25]">TIM7_LPTIM2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[2f]">USART2_LPUART2_IRQHandler</a> from gps_port.o(.text.USART2_LPUART2_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[30]">USART3_4_5_6_LPUART1_IRQHandler</a> from stm32g0xx_it.o(.text.USART3_4_5_6_LPUART1_IRQHandler) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[1b]">USB_UCPD1_2_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[5c]">UrcCallReadyCb</a> from gsm_urc_api.o(.text.UrcCallReadyCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[5e]">UrcCfunCb</a> from gsm_urc_api.o(.text.UrcCfunCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[5d]">UrcCpinCb</a> from gsm_urc_api.o(.text.UrcCpinCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[65]">UrcGprsDeactiveCb</a> from gsm_gprs_api.o(.text.UrcGprsDeactiveCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[61]">UrcGprsRegistrationCb</a> from gsm_urc_api.o(.text.UrcGprsRegistrationCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[60]">UrcGsmRegistrationCb</a> from gsm_urc_api.o(.text.UrcGsmRegistrationCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[5f]">UrcSmsCb</a> from gsm_sms.o(.text.UrcSmsCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[5b]">UrcSmsReadyCb</a> from gsm_urc_api.o(.text.UrcSmsReadyCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[63]">UrcUnsecuredS0ClosedCb</a> from gsm_socket_api.o(.text.UrcUnsecuredS0ClosedCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[64]">UrcUnsecuredS1ClosedCb</a> from gsm_socket_api.o(.text.UrcUnsecuredS1ClosedCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[62]">UrcUnsecuredSocketReadCb</a> from gsm_socket_api.o(.text.UrcUnsecuredSocketReadCb) referenced from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[66]">UrcVoltageMonitorCb</a> from gsm_urc_api.o(.text.UrcVoltageMonitorCb) referenced 4 times from gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32g0b1xx.o(.text) referenced from startup_stm32g0b1xx.o(RESET)
 <LI><a href="#[33]">__main</a> from __main.o(!!!main) referenced from startup_stm32g0b1xx.o(.text)
 <LI><a href="#[38]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[52]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[39]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[37]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[3a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[54]">_scanf_really_hex_real</a> from scanf_hexfp.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[55]">_scanf_really_infnan</a> from scanf_infnan.o(.text) referenced from scanf2.o(x$fpl$scanf2)
 <LI><a href="#[53]">_scanf_really_real</a> from scanf_fp.o(.text) referenced from scanf1.o(x$fpl$scanf1)
 <LI><a href="#[36]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[35]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[34]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[7]">getIgnitionPinState</a> from digio_port.o(.text.getIgnitionPinState) referenced 2 times from digio_api.o(.data.inputHandle)
 <LI><a href="#[8]">getSwitchEnablePinState</a> from digio_port.o(.text.getSwitchEnablePinState) referenced 2 times from digio_api.o(.data.inputHandle)
 <LI><a href="#[3b]">isspace</a> from isspace.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[3e]">serialDataRcvCb</a> from ais_app.o(.text.serialDataRcvCb) referenced from debug_log.o(.text.DebugLogInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[69]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[94]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[6d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[70]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[72]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[74]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[7e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[27f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[280]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[76]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[281]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[282]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[283]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[284]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[285]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[78]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[286]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[287]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[288]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[289]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[28a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[28d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[28e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[28f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[290]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[291]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[292]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[293]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[294]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[295]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[296]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[297]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[298]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[299]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[29a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[29b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[29c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[29d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; PacketHandler &rArr; PacketTask &rArr; checkWhetherToPacketSendOrSave &rArr; AISGetPacketChecksum &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[de]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[82]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[29f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[84]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM16_FDCAN_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM17_FDCAN_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM6_DAC_LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM7_LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB_UCPD1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g0b1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g0b1xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_uldivmod</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2a1]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
</UL>

<P><STRONG><a name="[88]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGetCurrentCmd
</UL>

<P><STRONG><a name="[8a]"></a>__2snprintf</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVersionPrint
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUSetState
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsOkRespCb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpOkRespCb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUrcResonse
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResponseHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileCloseStart
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootCheckUpdateRequired
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileOpenStart
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileReadStart
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaGetProcessResp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SslOkRespCb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseCb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadCb
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteCb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenCb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsSetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReceiveSMSHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSenderMobileNo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSmsRespCb
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsOkRespCb
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmsRespCb
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketHandlerStatesInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryInitCb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCcidImeiRespCb
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOkRespCb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSMSIndex
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmListSMSRespCb
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivateStart
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileRespCb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOpsNameHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownRespCb
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollSignalHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmRSSIRespCb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateGprsRegistration
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateNetworkRegistration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSim1GprsConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlertDetails
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrackInterval
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIpPort1Details
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashWrite
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetSetState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISGetPacketChecksum
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFIDData
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHttpHeader
</UL>

<P><STRONG><a name="[8c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[71]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[2a2]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[95]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAISSockets
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[c9]"></a>_scanf_string</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[97]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetServerDetailsAndDataLen
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenCb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcSmsCb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryInitCb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDateTimeRespCb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSMSIndex
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileRespCb
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGsmRegistrationCb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGprsRegistrationCb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCfunCb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCREGHandlerCb
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdFrmMemForAppFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdForPacketing
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[10e]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCmdResponse
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenCb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcSmsCb
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSenderMobileNo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryNwInfoRespCb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQSPNHandlerCb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSMSIndex
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGsmRegistrationCb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGprsRegistrationCb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCREGHandlerCb
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[150]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetServerDetailsAndDataLen
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCcidImeiRespCb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryOpsCb
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[1af]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[11a]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaStartFromFtp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[eb]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFindString
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCmdResponse
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUrcResonse
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaGetProcessResp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetServerDetailsAndDataLen
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenCb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcSmsCb
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReceiveSMSHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendSMSHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDeleteSMSHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryInitCb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCcidImeiRespCb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decimal_to_hexadecimal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileAtCmdHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCpinCb
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCheckRegistrationHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISGetPacketChecksum
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_atoh
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[10d]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFindString
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCmdResponse
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUrcResonse
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSimStateByErrCode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSimStateByName
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUSetState
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootCheckUpdateRequired
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSenderMobileNo
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketHandlerStatesInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCSQData
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVehRegNum
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprs0SimConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServer0Config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntervals
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCpinCb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOpsNameHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollSignalHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCREGHandlerCb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryOpsCb
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendPacket
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetSetState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetEPCData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Checksum
</UL>

<P><STRONG><a name="[2a3]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[9c]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketHandlerStatesInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCSQData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSimApn
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdFrmMemForAppFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdForPacketing
</UL>

<P><STRONG><a name="[a1]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUartMspPortInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaResponseHandler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartPortInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaGetProcessResp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogInitPort
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsSetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReceiveSMSHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSenderMobileNo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSmsRespCb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitClearCellDataBuff
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitStart
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryInitCb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketGetImeiCcid
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCcidImeiRespCb
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gsm_time
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryNwInfoRespCb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQSPNHandlerCb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDateTimeRespCb
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryConfig
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decimal_to_hexadecimal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGsmRegistrationCb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGprsRegistrationCb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCfunCb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCpinCb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCREGHandlerCb
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryOpsCb
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAISSockets
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendPacket
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISGetPacketChecksum
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFIDData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexCellIDDataForPacket
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetRemainingTagCnt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidEpcDataMonitorHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_time
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gps_time
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGpsPacketData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Checksum
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPSConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidSerialPort
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHttpHeader
</UL>

<P><STRONG><a name="[2a4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[a0]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenCb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcSmsCb
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSmsRespCb
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCCIDNumber
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEINumber
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryInitCb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCcidImeiRespCb
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOperatorNameInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryNwInfoRespCb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQSPNHandlerCb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDateTimeRespCb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSMSIndex
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSimApn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decimal_to_hexadecimal
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendPacket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPacketTypeString
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[a4]"></a>mktime</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_time
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMemory
</UL>

<P><STRONG><a name="[2a5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[2a7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[2aa]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBatAdcToPercent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
</UL>

<P><STRONG><a name="[a5]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
</UL>

<P><STRONG><a name="[a8]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2ab]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
</UL>

<P><STRONG><a name="[ab]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[aa]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBatAdcToPercent
</UL>

<P><STRONG><a name="[2ac]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_time
</UL>

<P><STRONG><a name="[2ad]"></a>_ll_sfrom_d</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, dfixl.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
</UL>

<P><STRONG><a name="[2ae]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
</UL>

<P><STRONG><a name="[2af]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBatAdcToPercent
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[2b0]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBatAdcToPercent
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
</UL>

<P><STRONG><a name="[2b1]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
</UL>

<P><STRONG><a name="[b0]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[af]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[2b2]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
</UL>

<P><STRONG><a name="[2b3]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2b4]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[b5]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[52]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[89]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[34]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[73]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[75]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[96]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[36]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[99]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[90]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2b6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[bb]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c0]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring (Weak Reference)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb (Weak Reference)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc (Weak Reference)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[c4]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b7]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b8]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ba]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _btod_emuld &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[b9]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d0]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_edivd &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d1]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[26b]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[d4]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[7c]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[cb]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[53]"></a>_scanf_really_real</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf1.o(x$fpl$scanf1)
</UL>
<P><STRONG><a name="[81]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[279]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[d2]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[d3]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2b8]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2b9]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[85]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[54]"></a>_scanf_really_hex_real</STRONG> (Thumb, 806 bytes, Stack size 72 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[55]"></a>_scanf_really_infnan</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf2.o(x$fpl$scanf2)
</UL>
<P><STRONG><a name="[2ba]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>ADC_Disable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[e7]"></a>ADC_Enable</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32g0xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[e9]"></a>AISGetPacketChecksum</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, packet_api.o(.text.AISGetPacketChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = AISGetPacketChecksum &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16Get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
</UL>

<P><STRONG><a name="[ed]"></a>AddInput</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dig_ip_handler.o(.text.AddInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddInput
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDigitalIOConfig
</UL>

<P><STRONG><a name="[ef]"></a>AisAppInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ais_app.o(.text.AisAppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = AisAppInit &rArr; InitPacketConfig &rArr; InitGPSConfig &rArr; InitGPS &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAISSockets
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>AisDebugInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ais_app.o(.text.AisDebugInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AisDebugInit &rArr; DebugLogInit &rArr; DebugLogInitPort &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>AppVersionPrint</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, packet_api.o(.text.AppVersionPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = AppVersionPrint &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>BatteryHandler</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, bat_api.o(.text.BatteryHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BatteryHandler &rArr; GetSupplyVoltages &rArr; ConvertBatAdcToPercent &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryStateHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdcVrefIntValue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTempSensorValue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdcBatValue
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdcSupplyValue
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSupplyADC
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_batteryLEDState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>BatteryStateHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, bat_api.o(.text.BatteryStateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BatteryStateHandler &rArr; IsChargerConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargingFull
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargerConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[108]"></a>CPUSetState</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, main.o(.text.CPUSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CPUSetState &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>ChangeSwitchPinToOutPut</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, digio_port.o(.text.ChangeSwitchPinToOutPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ChangeSwitchPinToOutPut &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>CheckCmdResponse</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gsm_process_resp.o(.text.CheckCmdResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CheckCmdResponse &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResponseHandler
</UL>

<P><STRONG><a name="[10f]"></a>CheckUrcResonse</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gsm_urc_api.o(.text.CheckUrcResonse))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CheckUrcResonse &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResponseHandler
</UL>

<P><STRONG><a name="[110]"></a>ClearGpsPacketData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gps_api.o(.text.ClearGpsPacketData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearGpsPacketData
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
</UL>

<P><STRONG><a name="[114]"></a>ConvertBatAdcToPercent</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bat_api.o(.text.ConvertBatAdcToPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ConvertBatAdcToPercent &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyVoltages
</UL>

<P><STRONG><a name="[119]"></a>ConvertNmeaToDecimal</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, gps_api.o(.text.ConvertNmeaToDecimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ConvertNmeaToDecimal &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[ec]"></a>Crc16Get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, crc16.o(.text.Crc16Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc16Get
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootBackupGetCrc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootCheckUpdateRequired
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISGetPacketChecksum
</UL>

<P><STRONG><a name="[148]"></a>Crc16GetFromSeed</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, crc16.o(.text.Crc16GetFromSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc16GetFromSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[1c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32g0xx_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>DeactGprsWhenIdle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_idle_task.o(.text.DeactGprsWhenIdle))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[f6]"></a>DebugLogInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug_log.o(.text.DebugLogInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DebugLogInit &rArr; DebugLogInitPort &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogInitPort
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisDebugInit
</UL>

<P><STRONG><a name="[121]"></a>DebugLogInitPort</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, debug_log_port.o(.text.DebugLogInitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DebugLogInitPort &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogInit
</UL>

<P><STRONG><a name="[123]"></a>DebugLogPrintString</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, debug_log.o(.text.DebugLogPrintString))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGetErrorString
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaSetState
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSmsRespCb
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitStart
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmListSMSRespCb
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDeactivationHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCheckRegistrationHandler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendSetState
</UL>

<P><STRONG><a name="[f9]"></a>DebugLogSend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, debug_log_port.o(.text.DebugLogSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DebugLogSend &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVersionPrint
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUSetState
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsOkRespCb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpOkRespCb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUrcResonse
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResponseHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootCheckUpdateRequired
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SslOkRespCb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcUnsecuredSocketReadCb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseCb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadCb
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteCb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenCb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSenderMobileNo
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSmsRespCb
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsOkRespCb
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmsRespCb
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryInitCb
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCcidImeiRespCb
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOkRespCb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSMSIndex
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmListSMSRespCb
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileRespCb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOpsNameHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownRespCb
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollSignalHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmRSSIRespCb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateGprsRegistration
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateNetworkRegistration
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashWrite
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetSetState
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHttpHeader
</UL>

<P><STRONG><a name="[125]"></a>DeleteSentPacket</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mem_packet_api.o(.text.DeleteSentPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DeleteSentPacket &rArr; FlashWriteByte &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
</UL>

<P><STRONG><a name="[127]"></a>EraseBlock4KB</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, memorydriver.o(.text.EraseBlock4KB))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EraseBlock4KB &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteArray
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMemory
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlockContainingHeader
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMultipleCopies
</UL>

<P><STRONG><a name="[12e]"></a>EraseNextBlockIfReqd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mem_packet_api.o(.text.EraseNextBlockIfReqd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = EraseNextBlockIfReqd &rArr; EraseBlockContainingHeader &rArr; ReadPacketHeader &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlockContainingHeader
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePacketToMem
</UL>

<P><STRONG><a name="[1fc]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[12f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32g0xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[130]"></a>FeedWatchdog</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.FeedWatchdog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FeedWatchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMemory
</UL>

<P><STRONG><a name="[132]"></a>FlashReadArray</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryport.o(.text.FlashReadArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FlashReadArray &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlock
</UL>

<P><STRONG><a name="[12a]"></a>FlashWriteArray</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryport.o(.text.FlashWriteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlashWriteArray &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteByte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlock
</UL>

<P><STRONG><a name="[126]"></a>FlashWriteByte</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, memorydriver.o(.text.FlashWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FlashWriteByte &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteArray
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSentPacket
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePacketToMem
</UL>

<P><STRONG><a name="[135]"></a>FotaGetProcessResp</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, fota_api.o(.text.FotaGetProcessResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FotaGetProcessResp &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootGetBackUpAPPVer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpGetFileDwnldErrorCode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaSetState
</UL>

<P><STRONG><a name="[138]"></a>FotaHandler</STRONG> (Thumb, 1524 bytes, Stack size 24 bytes, fota_api.o(.text.FotaHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = FotaHandler &rArr; FtpStartDownload &rArr; FtpUrlDecode &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16GetFromSeed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootWriteBackupHeader
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootBackupGetCrc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileCloseStart
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootCheckUpdateRequired
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileReadHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileOpenHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileOpenStart
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSendState
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileCloseHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileReadStart
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpStartDownload
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaSetState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>FotaSetState</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, fota_api.o(.text.FotaSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FotaSetState &rArr; FotaGetProcessResp &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMS
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaGetProcessResp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaStartFromFtp
</UL>

<P><STRONG><a name="[14b]"></a>FotaStartFromFtp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fota_api.o(.text.FotaStartFromFtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FotaStartFromFtp &rArr; FotaSetState &rArr; FotaGetProcessResp &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaSetState
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
</UL>

<P><STRONG><a name="[3f]"></a>FtpDownloadCompleteCb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fota_api.o(.text.FtpDownloadCompleteCb))
<BR>[Address Reference Count : 1]<UL><LI> fota_api.o(.text.FotaHandler)
</UL>
<P><STRONG><a name="[40]"></a>FtpFileReadByteCb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fota_api.o(.text.FtpFileReadByteCb))
<BR>[Address Reference Count : 1]<UL><LI> fota_api.o(.text.FotaHandler)
</UL>
<P><STRONG><a name="[14c]"></a>FtpGetCurrentCmd</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gsm_ftp_api.o(.text.FtpGetCurrentCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = FtpGetCurrentCmd &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
</UL>

<P><STRONG><a name="[14d]"></a>FtpGetErrorString</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, gsm_ftp_api.o(.text.FtpGetErrorString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FtpGetErrorString &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpProcessRespCb
</UL>

<P><STRONG><a name="[0]"></a>FtpOkRespCb</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gsm_ftp_api.o(.text.FtpOkRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FtpOkRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_ftp_api.o(.data.ftpCmdList)
</UL>
<P><STRONG><a name="[1]"></a>FtpProcessRespCb</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, gsm_ftp_api.o(.text.FtpProcessRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = FtpProcessRespCb &rArr; FtpGetErrorString &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGetErrorString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_ftp_api.o(.data.ftpCmdList)
</UL>
<P><STRONG><a name="[139]"></a>FtpStartDownload</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gsm_ftp_api.o(.text.FtpStartDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = FtpStartDownload &rArr; FtpUrlDecode &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateIsIdle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpUrlDecode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[14f]"></a>FtpUrlDecode</STRONG> (Thumb, 1232 bytes, Stack size 72 bytes, ftp_url_decode.o(.text.FtpUrlDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = FtpUrlDecode &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpStartDownload
</UL>

<P><STRONG><a name="[151]"></a>GSMGetServerDetailsAndDataLen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.GSMGetServerDetailsAndDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GSMGetServerDetailsAndDataLen &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadCb
</UL>

<P><STRONG><a name="[3c]"></a>GSMLedStatusCb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ais_app.o(.text.GSMLedStatusCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GSMLedStatusCb &rArr; Set_gprsLEDState
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gprsLEDState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_app.o(.text.AisAppInit)
</UL>
<P><STRONG><a name="[239]"></a>GSMStrPrefixMatch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gsm_common.o(.text.GSMStrPrefixMatch))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCSQData
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
</UL>

<P><STRONG><a name="[f4]"></a>GetAISSockets</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ais_app.o(.text.GetAISSockets))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GetAISSockets &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketGet
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisAppInit
</UL>

<P><STRONG><a name="[175]"></a>GetAisDeviceData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_config_api.o(.text.GetAisDeviceData))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdFrmMemForAppFile
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdForPacketing
</UL>

<P><STRONG><a name="[155]"></a>GetAlertDetails</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ais_app.o(.text.GetAlertDetails))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GetAlertDetails &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[f0]"></a>GetAllMemoryConfigurations</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ais_app.o(.text.GetAllMemoryConfigurations))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetAllMemoryConfigurations &rArr; GetUnitIdFrmMemForAppFile &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprs0SimConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsConfigsFromMem
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPRSmemconfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetServer0Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalsConfigfrmMem
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdFrmMemForAppFile
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdForPacketing
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPacketIntervalVal
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisAppInit
</UL>

<P><STRONG><a name="[15e]"></a>GetCCIDNumber</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm_init_cmd.o(.text.GetCCIDNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCCIDNumber &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketGetImeiCcid
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[251]"></a>GetCrc16</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, qmath.o(.text.GetCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePacketToMem
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVehRegNum
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprs0SimConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServer0Config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntervals
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleCopies
</UL>

<P><STRONG><a name="[15f]"></a>GetDigitalInputStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, digio_api.o(.text.GetDigitalInputStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDigitalInputStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputState
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[169]"></a>GetEmergencyParams</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_config_api.o(.text.GetEmergencyParams))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalsConfigfrmMem
</UL>

<P><STRONG><a name="[158]"></a>GetGprs0SimConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_config_api.o(.text.GetGprs0SimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsConfigsFromMem
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPRSmemconfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[15b]"></a>GetGprsConfigsFromMem</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsm_gprs_api.o(.text.GetGprsConfigsFromMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetGprsConfigsFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprs0SimConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[161]"></a>GetGpsData</STRONG> (Thumb, 1056 bytes, Stack size 48 bytes, gps_api.o(.text.GetGpsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetGpsData &rArr; ConvertNmeaToDecimal &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Checksum
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_atoh
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaResponseHandler
</UL>

<P><STRONG><a name="[237]"></a>GetGpsDataForPacketing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gps_api.o(.text.GetGpsDataForPacketing))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGsmGpsDataForPacketing
</UL>

<P><STRONG><a name="[164]"></a>GetHexCellIDDataForPacket</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, packet_api.o(.text.GetHexCellIDDataForPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetHexCellIDDataForPacket &rArr; decimal_to_hexadecimal &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decimal_to_hexadecimal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
</UL>

<P><STRONG><a name="[166]"></a>GetIMEINumber</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm_init_cmd.o(.text.GetIMEINumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetIMEINumber &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketGetImeiCcid
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[160]"></a>GetInputState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dig_ip_handler.o(.text.GetInputState))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalInputStatus
</UL>

<P><STRONG><a name="[167]"></a>GetIntervals</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_config_api.o(.text.GetIntervals))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalsConfigfrmMem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPacketIntervalVal
</UL>

<P><STRONG><a name="[156]"></a>GetIntervalsConfigfrmMem</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ais_app.o(.text.GetIntervalsConfigfrmMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetIntervalsConfigfrmMem
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmergencyParams
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetThresholds
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervals
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
</UL>

<P><STRONG><a name="[16a]"></a>GetIpPort1Details</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ais_app.o(.text.GetIpPort1Details))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GetIpPort1Details &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[268]"></a>GetNeighbouringCellInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_utility.o(.text.GetNeighbouringCellInfo))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGsmGpsDataForPacketing
</UL>

<P><STRONG><a name="[234]"></a>GetNumPacketsInMem</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mem_packet_api.o(.text.GetNumPacketsInMem))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[16b]"></a>GetOperatorNameInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsm_idle_task.o(.text.GetOperatorNameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetOperatorNameInit &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[159]"></a>GetPacketIntervalVal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, packet_api.o(.text.GetPacketIntervalVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPacketIntervalVal
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervals
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[16c]"></a>GetPacketTypeString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, packet_api.o(.text.GetPacketTypeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetPacketTypeString &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
</UL>

<P><STRONG><a name="[25a]"></a>GetPvtSendState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ais_app.o(.text.GetPvtSendState))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
</UL>

<P><STRONG><a name="[16d]"></a>GetRFIDData</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, packet_api.o(.text.GetRFIDData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GetRFIDData &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidBytesToHex
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetEPCData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetRemainingTagCnt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidEpcDataMonitorHandler
</UL>

<P><STRONG><a name="[1b1]"></a>GetRfidPwrThValues</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_config_api.o(.text.GetRfidPwrThValues))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidInit
</UL>

<P><STRONG><a name="[22c]"></a>GetRfidReaderSendState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_rfid_api.o(.text.GetRfidReaderSendState))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[170]"></a>GetSerialPwrKeyState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial_rfid_port.o(.text.GetSerialPwrKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSerialPwrKeyState
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[157]"></a>GetServer0Config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_config_api.o(.text.GetServer0Config))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[267]"></a>GetServingNeighCellInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_utility.o(.text.GetServingNeighCellInfo))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGsmGpsDataForPacketing
</UL>

<P><STRONG><a name="[172]"></a>GetSim1GprsConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ais_app.o(.text.GetSim1GprsConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GetSim1GprsConfig &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[216]"></a>GetSizeOfPacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, packet_api.o(.text.GetSizeOfPacket))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMemory
</UL>

<P><STRONG><a name="[ee]"></a>GetStartTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qtimespent.o(.text.GetStartTime))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaResponseHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_Handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUSetState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReadFixedLengthData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketGet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwInfo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwOperator
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollReceivedSMS
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollSignalStrength
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDeactivationHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetGprsActTime
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_batteryLEDState
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCheckRegistrationHandler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gprsLEDState
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddInput
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpsLEDState
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[229]"></a>GetSupplyInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bat_api.o(.text.GetSupplyInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[101]"></a>GetSupplyVoltages</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, bat_api.o(.text.GetSupplyVoltages))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetSupplyVoltages &rArr; ConvertBatAdcToPercent &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBatAdcToPercent
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[168]"></a>GetThresholds</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_config_api.o(.text.GetThresholds))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervalsConfigfrmMem
</UL>

<P><STRONG><a name="[174]"></a>GetTrackInterval</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ais_app.o(.text.GetTrackInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GetTrackInterval &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[15a]"></a>GetUnitIdForPacketing</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, packet_api.o(.text.GetUnitIdForPacketing))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetUnitIdForPacketing &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAisDeviceData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[15d]"></a>GetUnitIdFrmMemForAppFile</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ais_app.o(.text.GetUnitIdFrmMemForAppFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetUnitIdFrmMemForAppFile &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAisDeviceData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHttpHeader
</UL>

<P><STRONG><a name="[176]"></a>GetWriteIndex</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mem_packet_api.o(.text.GetWriteIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GetWriteIndex &rArr; ReadPacketHeader &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMemory
</UL>

<P><STRONG><a name="[177]"></a>Get_Gps_time</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gps_api.o(.text.Get_Gps_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Gps_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[178]"></a>Get_Gsm_time</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gsm_idle_task.o(.text.Get_Gsm_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Gsm_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[179]"></a>Get_RTC_time</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, rtc_port.o(.text.Get_RTC_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Get_RTC_time &rArr; HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[17c]"></a>GprsActivateStart</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gsm_gprs_api.o(.text.GprsActivateStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GprsActivateStart &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>

<P><STRONG><a name="[17d]"></a>GprsActivationHandler</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, gsm_gprs_api.o(.text.GprsActivationHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GprsActivationHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[41]"></a>GprsDeactivateCmdCb</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gsm_gprs_api.o(.text.GprsDeactivateCmdCb))
<BR>[Address Reference Count : 1]<UL><LI> gsm_gprs_api.o(.text.GprsDeactivationHandler)
</UL>
<P><STRONG><a name="[1c6]"></a>GprsDeactivateStart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gsm_gprs_api.o(.text.GprsDeactivateStart))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>

<P><STRONG><a name="[180]"></a>GprsDeactivationHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gsm_gprs_api.o(.text.GprsDeactivationHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GprsDeactivationHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[2]"></a>GprsOkRespCb</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gsm_gprs_api.o(.text.GprsOkRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GprsOkRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_gprs_api.o(.data.gprsInitCmdList)
</UL>
<P><STRONG><a name="[181]"></a>GpsNmeaResponseHandler</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, gps_api.o(.text.GpsNmeaResponseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GpsNmeaResponseHandler &rArr; GetGpsData &rArr; ConvertNmeaToDecimal &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDrain
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>GpsRingBuffInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gps_api.o(.text.GpsRingBuffInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpsRingBuffInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
</UL>

<P><STRONG><a name="[50]"></a>GpsUartReceiveDataCb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gps_api.o(.text.GpsUartReceiveDataCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GpsUartReceiveDataCb &rArr; RingBufferFill
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps_port.o(.text.InitGPS)
</UL>
<P><STRONG><a name="[185]"></a>GsmAtHandlerInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gsm_at_handler.o(.text.GsmAtHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GsmAtHandlerInit &rArr; GsmUartPortInit &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartPortInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[43]"></a>GsmCREGHandlerCb</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmCREGHandlerCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GsmCREGHandlerCb &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_statemachine.o(.text.GsmCheckRegistrationHandler)
</UL>
<P><STRONG><a name="[4]"></a>GsmCcidImeiRespCb</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, gsm_init_cmd.o(.text.GsmCcidImeiRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmCcidImeiRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketGetImeiCcid
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_init_cmd.o(.data.gsmInitCmdList)
</UL>
<P><STRONG><a name="[188]"></a>GsmCheckRegistrationHandler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gsm_statemachine.o(.text.GsmCheckRegistrationHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GsmCheckRegistrationHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[242]"></a>GsmClearReadSockUrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmClearReadSockUrc))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendSetState
</UL>

<P><STRONG><a name="[246]"></a>GsmClearSockUrcStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmClearSockUrcStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendSetState
</UL>

<P><STRONG><a name="[248]"></a>GsmCloseHttpSocket</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmCloseHttpSocket))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[58]"></a>GsmDateTimeRespCb</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, gsm_idle_task.o(.text.GsmDateTimeRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GsmDateTimeRespCb &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_idle_task.o(.rodata.gsmPollCmdList)
</UL>
<P><STRONG><a name="[25c]"></a>GsmDeleteSMS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_sms.o(.text.GsmDeleteSMS))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
</UL>

<P><STRONG><a name="[189]"></a>GsmDeleteSMSHandler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gsm_sms.o(.text.GsmDeleteSMSHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmDeleteSMSHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsHandler
</UL>

<P><STRONG><a name="[18a]"></a>GsmFileAtCmdHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gsm_ufs.o(.text.GsmFileAtCmdHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GsmFileAtCmdHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileReadHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileOpenHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileCloseHandler
</UL>

<P><STRONG><a name="[13b]"></a>GsmFileCloseHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gsm_ufs.o(.text.GsmFileCloseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmFileCloseHandler &rArr; GsmFileAtCmdHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileAtCmdHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[143]"></a>GsmFileCloseStart</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gsm_ufs.o(.text.GsmFileCloseStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GsmFileCloseStart &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[13f]"></a>GsmFileOpenHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gsm_ufs.o(.text.GsmFileOpenHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmFileOpenHandler &rArr; GsmFileAtCmdHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileAtCmdHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[13e]"></a>GsmFileOpenStart</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gsm_ufs.o(.text.GsmFileOpenStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GsmFileOpenStart &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateIsIdle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateIsFileProcessing
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[140]"></a>GsmFileReadHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gsm_ufs.o(.text.GsmFileReadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmFileReadHandler &rArr; GsmFileAtCmdHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileAtCmdHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[13a]"></a>GsmFileReadStart</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gsm_ufs.o(.text.GsmFileReadStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmFileReadStart &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[44]"></a>GsmFileRespCb</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, gsm_ufs.o(.text.GsmFileRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmFileRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReadFixedLengthData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_ufs.o(.text.GsmFileAtCmdHandler)
</UL>
<P><STRONG><a name="[18d]"></a>GsmFindString</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gsm_common.o(.text.GsmFindString))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GsmFindString &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryInitCb
</UL>

<P><STRONG><a name="[18e]"></a>GsmFtpHandler</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, gsm_ftp_api.o(.text.GsmFtpHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GsmFtpHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpGetCurrentCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachine
</UL>

<P><STRONG><a name="[22a]"></a>GsmGetModemState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_statemachine.o(.text.GsmGetModemState))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[18f]"></a>GsmGetSMSIndex</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gsm_utility.o(.text.GsmGetSMSIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GsmGetSMSIndex &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmListSMSRespCb
</UL>

<P><STRONG><a name="[13c]"></a>GsmGetSendState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gsm_sms.o(.text.GsmGetSendState))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[190]"></a>GsmGetSenderMobileNo</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gsm_sms.o(.text.GsmGetSenderMobileNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmGetSenderMobileNo &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSmsRespCb
</UL>

<P><STRONG><a name="[191]"></a>GsmGetSimStateByErrCode</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, gsm_sim_api.o(.text.GsmGetSimStateByErrCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GsmGetSimStateByErrCode &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
</UL>

<P><STRONG><a name="[192]"></a>GsmGetSimStateByName</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, gsm_sim_api.o(.text.GsmGetSimStateByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GsmGetSimStateByName &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSimStatusRespCb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCpinCb
</UL>

<P><STRONG><a name="[245]"></a>GsmGetSockUrcStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmGetSockUrcStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[19e]"></a>GsmGprsIsActive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_gprs_api.o(.text.GsmGprsIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCheckGprsAndUpdateState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetStateIsReady
</UL>

<P><STRONG><a name="[193]"></a>GsmHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsm_api.o(.text.GsmHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GsmHandler &rArr; GsmStateMachine &rArr; GsmSocketHandler &rArr; GsmSocketOpenHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResponseHandler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>GsmIdleTaskHandler</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, gsm_idle_task.o(.text.GsmIdleTaskHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GsmIdleTaskHandler &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsNetworkRegistered
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwInfo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwOperator
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsGprsRegistered
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollReceivedSMS
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollSignalStrength
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGprsIsActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[f2]"></a>GsmInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gsm_api.o(.text.GsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = GsmInit &rArr; GsmAtHandlerInit &rArr; GsmUartPortInit &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPwrKeyInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPwrEnableInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmAtHandlerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisAppInit
</UL>

<P><STRONG><a name="[1a2]"></a>GsmInitClearCellDataBuff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsm_utility.o(.text.GsmInitClearCellDataBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmInitClearCellDataBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitStart
</UL>

<P><STRONG><a name="[264]"></a>GsmInitFunctionalityNotReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_init_cmd.o(.text.GsmInitFunctionalityNotReady))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCfunCb
</UL>

<P><STRONG><a name="[263]"></a>GsmInitFunctionalityReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_init_cmd.o(.text.GsmInitFunctionalityReady))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCfunCb
</UL>

<P><STRONG><a name="[1a3]"></a>GsmInitHandler</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, gsm_init_cmd.o(.text.GsmInitHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmInitHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1a4]"></a>GsmInitStart</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gsm_init_cmd.o(.text.GsmInitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmInitStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitClearCellDataBuff
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketHandlerStatesInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketStateReset
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetGprsActTime
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>

<P><STRONG><a name="[262]"></a>GsmInitUpdateModuleReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_init_cmd.o(.text.GsmInitUpdateModuleReady))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCallReadyCb
</UL>

<P><STRONG><a name="[266]"></a>GsmInitUpdateSimNotReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_init_cmd.o(.text.GsmInitUpdateSimNotReady))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCpinCb
</UL>

<P><STRONG><a name="[265]"></a>GsmInitUpdateSimReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_init_cmd.o(.text.GsmInitUpdateSimReady))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCpinCb
</UL>

<P><STRONG><a name="[17e]"></a>GsmIsAtIdle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_at_handler.o(.text.GsmIsAtIdle))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReceiveSMSHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendSMSHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDeleteSMSHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileAtCmdHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOpsNameHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollSignalHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCheckRegistrationHandler
</UL>

<P><STRONG><a name="[198]"></a>GsmIsGprsRegistered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_statemachine.o(.text.GsmIsGprsRegistered))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwTime
</UL>

<P><STRONG><a name="[197]"></a>GsmIsNetworkRegistered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_statemachine.o(.text.GsmIsNetworkRegistered))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[241]"></a>GsmIsReadSockUrcRcvd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmIsReadSockUrcRcvd))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[19d]"></a>GsmIsTimeToPollNwInfo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gsm_idle_task.o(.text.GsmIsTimeToPollNwInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmIsTimeToPollNwInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
</UL>

<P><STRONG><a name="[19c]"></a>GsmIsTimeToPollNwOperator</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gsm_idle_task.o(.text.GsmIsTimeToPollNwOperator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmIsTimeToPollNwOperator
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
</UL>

<P><STRONG><a name="[19a]"></a>GsmIsTimeToPollNwTime</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsm_idle_task.o(.text.GsmIsTimeToPollNwTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GsmIsTimeToPollNwTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsGprsRegistered
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
</UL>

<P><STRONG><a name="[199]"></a>GsmIsTimeToPollReceivedSMS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gsm_idle_task.o(.text.GsmIsTimeToPollReceivedSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmIsTimeToPollReceivedSMS
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
</UL>

<P><STRONG><a name="[19b]"></a>GsmIsTimeToPollSignalStrength</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gsm_idle_task.o(.text.GsmIsTimeToPollSignalStrength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmIsTimeToPollSignalStrength
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
</UL>

<P><STRONG><a name="[56]"></a>GsmListSMSRespCb</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, gsm_idle_task.o(.text.GsmListSMSRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GsmListSMSRespCb &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsRead
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSMSIndex
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_idle_task.o(.rodata.gsmPollCmdList)
</UL>
<P><STRONG><a name="[3]"></a>GsmOkRespCb</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gsm_init_cmd.o(.text.GsmOkRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmOkRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_init_cmd.o(.data.gsmInitCmdList)
</UL>
<P><STRONG><a name="[1a9]"></a>GsmOpsNameHandler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmOpsNameHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmOpsNameHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1aa]"></a>GsmPollSignalHandler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmPollSignalHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmPollSignalHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1ab]"></a>GsmPollStatusHandler</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, gsm_idle_task.o(.text.GsmPollStatusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmPollStatusHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1c4]"></a>GsmPollStatusSetCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gsm_idle_task.o(.text.GsmPollStatusSetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1ac]"></a>GsmPowerkeyPinOff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_port.o(.text.GsmPowerkeyPinOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmPowerkeyPinOff
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
</UL>

<P><STRONG><a name="[1ad]"></a>GsmPowerkeyPinOn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_port.o(.text.GsmPowerkeyPinOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmPowerkeyPinOn
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
</UL>

<P><STRONG><a name="[19f]"></a>GsmPwrEnableInit</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, gsm_port.o(.text.GsmPwrEnableInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GsmPwrEnableInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[1a0]"></a>GsmPwrKeyInit</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, gsm_port.o(.text.GsmPwrKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GsmPwrKeyInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[59]"></a>GsmQSPNHandlerCb</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gsm_idle_task.o(.text.GsmQSPNHandlerCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GsmQSPNHandlerCb &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_idle_task.o(.rodata.gsmPollCmdList)
</UL>
<P><STRONG><a name="[5]"></a>GsmQueryInitCb</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, gsm_init_cmd.o(.text.GsmQueryInitCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmQueryInitCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFindString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_init_cmd.o(.data.gsmInitCmdList)
</UL>
<P><STRONG><a name="[5a]"></a>GsmQueryNwInfoRespCb</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gsm_idle_task.o(.text.GsmQueryNwInfoRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GsmQueryNwInfoRespCb &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_idle_task.o(.rodata.gsmPollCmdList)
</UL>
<P><STRONG><a name="[45]"></a>GsmQueryOpsCb</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, gsm_statemachine.o(.text.GsmQueryOpsCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GsmQueryOpsCb &rArr; UpdateSimApn &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pucUTL_eSearchChar_Exe
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSimApn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_statemachine.o(.text.GsmOpsNameHandler)
</UL>
<P><STRONG><a name="[46]"></a>GsmRSSIRespCb</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmRSSIRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GsmRSSIRespCb &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCSQData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_statemachine.o(.text.GsmPollSignalHandler)
</UL>
<P><STRONG><a name="[18c]"></a>GsmReadFixedLengthData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gsm_at_handler.o(.text.GsmReadFixedLengthData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmReadFixedLengthData
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadCb
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileRespCb
</UL>

<P><STRONG><a name="[243]"></a>GsmReadHttpSocket</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmReadHttpSocket))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[1bd]"></a>GsmReceiveSMSHandler</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, gsm_sms.o(.text.GsmReceiveSMSHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GsmReceiveSMSHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsHandler
</UL>

<P><STRONG><a name="[1d6]"></a>GsmResetGprsActFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_gprs_api.o(.text.GsmResetGprsActFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1a5]"></a>GsmResetGprsActTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsm_gprs_api.o(.text.GsmResetGprsActTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmResetGprsActTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitStart
</UL>

<P><STRONG><a name="[1be]"></a>GsmResetPowerHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, gsm_reset_power.o(.text.GsmResetPowerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GsmResetPowerHandler &rArr; GsmResetPowerSetState &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1bf]"></a>GsmResetPowerSetState</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gsm_reset_power.o(.text.GsmResetPowerSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmResetPowerSetState &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPowerkeyPinOff
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffGsmPowerRegulatorSwitch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPowerkeyPinOn
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnGsmPowerRegulatorSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerHandler
</UL>

<P><STRONG><a name="[23d]"></a>GsmResetSockCloseFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmResetSockCloseFlag))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[195]"></a>GsmResponseHandler</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, gsm_at_handler.o(.text.GsmResponseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmResponseHandler &rArr; CheckUrcResonse &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCmdResponse
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUrcResonse
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDrain
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmHandler
</UL>

<P><STRONG><a name="[17f]"></a>GsmSendAtCmd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gsm_at_handler.o(.text.GsmSendAtCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartSendData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReceiveSMSHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendSMSHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDeleteSMSHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDeactivationHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileAtCmdHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOpsNameHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollSignalHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCheckRegistrationHandler
</UL>

<P><STRONG><a name="[25b]"></a>GsmSendSMS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_sms.o(.text.GsmSendSMS))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
</UL>

<P><STRONG><a name="[1c3]"></a>GsmSendSMSHandler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gsm_sms.o(.text.GsmSendSMSHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmSendSMSHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsHandler
</UL>

<P><STRONG><a name="[146]"></a>GsmSetState</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, gsm_statemachine.o(.text.GsmSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigStart
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketStateReset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitStart
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusSetCmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDeactivateStart
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivateStart
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileOpenStart
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpStartDownload
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaSetState
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketSetState
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateIpPort
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsSetState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryNwInfoRespCb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQSPNHandlerCb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDateTimeRespCb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSignalStrengthRespCb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmListSMSRespCb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcCpinCb
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmRSSIRespCb
</UL>

<P><STRONG><a name="[57]"></a>GsmSignalStrengthRespCb</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gsm_idle_task.o(.text.GsmSignalStrengthRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GsmSignalStrengthRespCb &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCSQData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_idle_task.o(.rodata.gsmPollCmdList)
</UL>
<P><STRONG><a name="[6]"></a>GsmSimStatusRespCb</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, gsm_init_cmd.o(.text.GsmSimStatusRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmSimStatusRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFindString
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSimStateByErrCode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSimStateByName
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_init_cmd.o(.data.gsmInitCmdList)
</UL>
<P><STRONG><a name="[1c7]"></a>GsmSmsHandler</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, gsm_sms.o(.text.GsmSmsHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GsmSmsHandler &rArr; GsmReceiveSMSHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateIsIdle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsSetState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReceiveSMSHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendSMSHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDeleteSMSHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachine
</UL>

<P><STRONG><a name="[f3]"></a>GsmSmsInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_sms.o(.text.GsmSmsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmSmsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisAppInit
</UL>

<P><STRONG><a name="[1a8]"></a>GsmSmsRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_sms.o(.text.GsmSmsRead))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmListSMSRespCb
</UL>

<P><STRONG><a name="[1c8]"></a>GsmSmsSetState</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gsm_sms.o(.text.GsmSmsSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GsmSmsSetState &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsHandler
</UL>

<P><STRONG><a name="[23c]"></a>GsmSockCloseFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmSockCloseFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[240]"></a>GsmSockGetWriteState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmSockGetWriteState))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[1c9]"></a>GsmSocketCheckGprsAndUpdateState</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gsm_socket_api.o(.text.GsmSocketCheckGprsAndUpdateState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GsmSocketCheckGprsAndUpdateState
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGprsIsActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
</UL>

<P><STRONG><a name="[47]"></a>GsmSocketCloseCb</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.GsmSocketCloseCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmSocketCloseCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_socket_api.o(.text.GsmSocketCloseHandler)
</UL>
<P><STRONG><a name="[1ca]"></a>GsmSocketCloseHandler</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.GsmSocketCloseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmSocketCloseHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
</UL>

<P><STRONG><a name="[153]"></a>GsmSocketGet</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gsm_socket_api.o(.text.GsmSocketGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GsmSocketGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAISSockets
</UL>

<P><STRONG><a name="[1cb]"></a>GsmSocketGetAvlData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gsm_socket_api.o(.text.GsmSocketGetAvlData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmSocketGetAvlData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferGetAvlLen
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
</UL>

<P><STRONG><a name="[1cd]"></a>GsmSocketHandler</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.GsmSocketHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GsmSocketHandler &rArr; GsmSocketOpenHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateIsIdle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCheckGprsAndUpdateState
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketSetState
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachine
</UL>

<P><STRONG><a name="[1d7]"></a>GsmSocketIsAnySecure</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gsm_socket_api.o(.text.GsmSocketIsAnySecure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GsmSocketIsAnySecure
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[23e]"></a>GsmSocketIsOpened</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmSocketIsOpened))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetStateIsReady
</UL>

<P><STRONG><a name="[154]"></a>GsmSocketOpen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmSocketOpen))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAISSockets
</UL>

<P><STRONG><a name="[48]"></a>GsmSocketOpenCb</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, gsm_socket_api.o(.text.GsmSocketOpenCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GsmSocketOpenCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_socket_api.o(.text.GsmSocketOpenHandler)
</UL>
<P><STRONG><a name="[1ce]"></a>GsmSocketOpenHandler</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, gsm_socket_api.o(.text.GsmSocketOpenHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GsmSocketOpenHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
</UL>

<P><STRONG><a name="[1d2]"></a>GsmSocketRead</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.GsmSocketRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GsmSocketRead &rArr; RingBufferDrain
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDrain
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
</UL>

<P><STRONG><a name="[4a]"></a>GsmSocketReadCb</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.GsmSocketReadCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmSocketReadCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReadFixedLengthData
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMGetServerDetailsAndDataLen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_socket_api.o(.text.GsmSocketReadHandler)
</UL>
<P><STRONG><a name="[49]"></a>GsmSocketReadFixedLenCb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsm_socket_api.o(.text.GsmSocketReadFixedLenCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GsmSocketReadFixedLenCb &rArr; RingBufferFill
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_socket_api.o(.text.GsmSocketReadCb)
</UL>
<P><STRONG><a name="[1d1]"></a>GsmSocketReadHandler</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, gsm_socket_api.o(.text.GsmSocketReadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GsmSocketReadHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
</UL>

<P><STRONG><a name="[1cf]"></a>GsmSocketSetState</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gsm_socket_api.o(.text.GsmSocketSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GsmSocketSetState &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
</UL>

<P><STRONG><a name="[1a6]"></a>GsmSocketStateReset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gsm_socket_api.o(.text.GsmSocketStateReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GsmSocketStateReset
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitStart
</UL>

<P><STRONG><a name="[23f]"></a>GsmSocketWrite</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.GsmSocketWrite))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[4b]"></a>GsmSocketWriteCb</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.GsmSocketWriteCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmSocketWriteCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartSendData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_socket_api.o(.text.GsmSocketWriteHandler)
</UL>
<P><STRONG><a name="[1d0]"></a>GsmSocketWriteHandler</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, gsm_socket_api.o(.text.GsmSocketWriteHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GsmSocketWriteHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
</UL>

<P><STRONG><a name="[1d3]"></a>GsmSofShutDownHandler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmSofShutDownHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmSofShutDownHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[4c]"></a>GsmSofShutDownRespCb</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmSofShutDownRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmSofShutDownRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_statemachine.o(.text.GsmSofShutDownHandler)
</UL>
<P><STRONG><a name="[1d4]"></a>GsmSslConfigHandler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, gsm_ssl_config.o(.text.GsmSslConfigHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GsmSslConfigHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsAtIdle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>

<P><STRONG><a name="[1c5]"></a>GsmSslConfigStart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gsm_ssl_config.o(.text.GsmSslConfigStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>

<P><STRONG><a name="[18b]"></a>GsmStateIsFileProcessing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_statemachine.o(.text.GsmStateIsFileProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileOpenStart
</UL>

<P><STRONG><a name="[14e]"></a>GsmStateIsIdle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gsm_statemachine.o(.text.GsmStateIsIdle))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFileOpenStart
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpStartDownload
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsHandler
</UL>

<P><STRONG><a name="[194]"></a>GsmStateMachine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gsm_statemachine.o(.text.GsmStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GsmStateMachine &rArr; GsmSocketHandler &rArr; GsmSocketOpenHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmFtpHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSmsHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmHandler
</UL>

<P><STRONG><a name="[1d5]"></a>GsmStateMachineHandler</STRONG> (Thumb, 732 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmStateMachineHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GsmStateMachineHandler &rArr; GprsActivationHandler &rArr; GsmSendAtCmd &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSslConfigHandler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketIsAnySecure
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusHandler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollStatusSetCmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIdleTaskHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetGprsActFlag
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDeactivationHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSofShutDownHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmOpsNameHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPollSignalHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCheckRegistrationHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachine
</UL>

<P><STRONG><a name="[1a1]"></a>GsmStateMachineInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gsm_statemachine.o(.text.GsmStateMachineInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GsmStateMachineInit &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[1d8]"></a>GsmUartMspPortInit</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, gsm_port.o(.text.GsmUartMspPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GsmUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[186]"></a>GsmUartPortInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gsm_port.o(.text.GsmUartPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GsmUartPortInit &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmAtHandlerInit
</UL>

<P><STRONG><a name="[42]"></a>GsmUartReceiveDataCb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsm_at_handler.o(.text.GsmUartReceiveDataCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GsmUartReceiveDataCb &rArr; RingBufferFill
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_at_handler.o(.text.GsmAtHandlerInit)
</UL>
<P><STRONG><a name="[1de]"></a>GsmUartSendByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gsm_port.o(.text.GsmUartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GsmUartSendByte &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmsRespCb
</UL>

<P><STRONG><a name="[1c2]"></a>GsmUartSendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gsm_port.o(.text.GsmUartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GsmUartSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendAtCmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteCb
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSmsRespCb
</UL>

<P><STRONG><a name="[1df]"></a>GsmUpdateGprsRegistration</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmUpdateGprsRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmUpdateGprsRegistration &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGprsRegistrationCb
</UL>

<P><STRONG><a name="[1b3]"></a>GsmUpdateIpPort</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gsm_socket_api.o(.text.GsmUpdateIpPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GsmUpdateIpPort &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[1e0]"></a>GsmUpdateNetworkRegistration</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gsm_statemachine.o(.text.GsmUpdateNetworkRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GsmUpdateNetworkRegistration &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrcGsmRegistrationCb
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, stm32g0xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSupplySenseADCPorts
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 584 bytes, Stack size 56 bytes, stm32g0xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSupplySenseADCPorts
</UL>

<P><STRONG><a name="[e3]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bat_port.o(.text.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[e4]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bat_port.o(.text.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[e2]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bat_port.o(.text.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_ADC_Init</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, stm32g0xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSupplySenseADCPorts
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 188 bytes, Stack size 136 bytes, stm32g0xx_hal_msp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_ADC_Start</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSupplyADC
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32g0xx_hal_adc.o(.text.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSupplySenseADCPorts
</UL>

<P><STRONG><a name="[11f]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, stm32g0xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_DMA_Init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32g0xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32g0xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[12b]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32g0xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryPorts
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, stm32g0xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
</UL>

<P><STRONG><a name="[24d]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text.HAL_FLASH_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
</UL>

<P><STRONG><a name="[24e]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashWrite
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_FLASH_Program</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, stm32g0xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashWrite
</UL>

<P><STRONG><a name="[24b]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g0xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashWrite
</UL>

<P><STRONG><a name="[10a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, stm32g0xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartMspPortInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUartMspPortInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSwitchPinToOutPut
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPwrKeyInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPwrEnableInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattChargePin
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPIChipSelectPin
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeDigitalIOPins
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSerialPwrkey
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED_port
</UL>

<P><STRONG><a name="[171]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargerConnected
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSwitchEnablePinState
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIgnitionPinState
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSerialPwrKeyState
</UL>

<P><STRONG><a name="[10b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g0xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSwitchPinToOutPut
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPwrKeyInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPwrEnableInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPowerkeyPinOff
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOffGsmPowerRegulatorSwitch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmPowerkeyPinOn
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnOnGsmPowerRegulatorSwitch
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPIChipSelectPin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryPorts
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryDriver
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteByte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlock
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSerialPwrkey
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_OFF
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_ON
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED_port
</UL>

<P><STRONG><a name="[e6]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_IWDG_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32g0xx_hal_iwdg.o(.text.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g0xx_hal_iwdg.o(.text.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32g0xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32g0xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g0xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_StrobeDBattpinsConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1da]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartMspPortInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUartMspPortInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartMspPortInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUartMspPortInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32g0xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, stm32g0xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUartMspPortInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, stm32g0xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[260]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32g0xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1160 bytes, Stack size 48 bytes, stm32g0xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32g0xx_hal_rtc.o(.text.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_time
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32g0xx_hal_rtc.o(.text.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_time
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_RTC_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32g0xx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRTC
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 80 bytes, Stack size 88 bytes, stm32g0xx_hal_msp.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, stm32g0xx_hal_rtc.o(.text.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRTC
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_time
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, stm32g0xx_hal_rtc.o(.text.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRTC
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_time
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32g0xx_hal_rtc.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[200]"></a>HAL_SPI_Init</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, stm32g0xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryPorts
</UL>

<P><STRONG><a name="[201]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, stm32g0xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_SPI_Receive</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, stm32g0xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadArray
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReceiveByte
</UL>

<P><STRONG><a name="[134]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, stm32g0xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteArray
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTransmitByte
</UL>

<P><STRONG><a name="[202]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, stm32g0xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_SYSCFG_StrobeDBattpinsConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g0xx_hal.o(.text.HAL_SYSCFG_StrobeDBattpinsConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32g0xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartPortInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidSerialPort
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartPortInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidSerialPort
</UL>

<P><STRONG><a name="[1db]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32g0xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartPortInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidSerialPort
</UL>

<P><STRONG><a name="[122]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartPortInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogInitPort
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidSerialPort
</UL>

<P><STRONG><a name="[206]"></a>HAL_UART_MspInit</STRONG> (Thumb, 228 bytes, Stack size 120 bytes, stm32g0xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartMspPortInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUartMspPortInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_UART_Transmit</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartSendData
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartSendByte
</UL>

<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>InitBattChargePin</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, bat_port.o(.text.InitBattChargePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InitBattChargePin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryConfig
</UL>

<P><STRONG><a name="[20d]"></a>InitBatteryConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bat_api.o(.text.InitBatteryConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = InitBatteryConfig &rArr; InitSupplySenseADCPorts &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSupplySenseADCPorts
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBattChargePin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
</UL>

<P><STRONG><a name="[210]"></a>InitDigitalIOConfig</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, digio_api.o(.text.InitDigitalIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitDigitalIOConfig &rArr; InitializeDigitalIOPins &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeDigitalIOPins
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddInput
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>InitGPS</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, gps_port.o(.text.InitGPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = InitGPS &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsRingBuffInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPSConfig
</UL>

<P><STRONG><a name="[213]"></a>InitGPSConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gps_api.o(.text.InitGPSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = InitGPSConfig &rArr; InitGPS &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPS
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
</UL>

<P><STRONG><a name="[214]"></a>InitMemory</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mem_packet_api.o(.text.InitMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = InitMemory &rArr; ReadAllConfigParamsFromFlash &rArr; SaveMultipleCopies &rArr; WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSizeOfPacket
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryDriver
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWriteIndex
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>InitPacketConfig</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, packet_api.o(.text.InitPacketConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = InitPacketConfig &rArr; InitGPSConfig &rArr; InitGPS &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRTC
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGpsPacketData
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPSConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisAppInit
</UL>

<P><STRONG><a name="[21a]"></a>InitRTC</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, rtc_port.o(.text.InitRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = InitRTC &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
</UL>

<P><STRONG><a name="[21b]"></a>InitRfidSerialPort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, serial_rfid_port.o(.text.InitRfidSerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = InitRfidSerialPort &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSerialPwrkey
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCmdHandlerInit
</UL>

<P><STRONG><a name="[21d]"></a>InitSPIChipSelectPin</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, memoryport.o(.text.InitSPIChipSelectPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitSPIChipSelectPin &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryPorts
</UL>

<P><STRONG><a name="[21c]"></a>InitSerialPwrkey</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, serial_rfid_port.o(.text.InitSerialPwrkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitSerialPwrkey &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidSerialPort
</UL>

<P><STRONG><a name="[20f]"></a>InitSupplySenseADCPorts</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bat_port.o(.text.InitSupplySenseADCPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = InitSupplySenseADCPorts &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryConfig
</UL>

<P><STRONG><a name="[218]"></a>Init_LED_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_api.o(.text.Init_LED_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Init_LED_Config &rArr; Init_LED_port &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED_port
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
</UL>

<P><STRONG><a name="[21e]"></a>Init_LED_port</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, led_port.o(.text.Init_LED_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Init_LED_port &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LED_Config
</UL>

<P><STRONG><a name="[211]"></a>InitializeDigitalIOPins</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, digio_port.o(.text.InitializeDigitalIOPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitializeDigitalIOPins &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDigitalIOConfig
</UL>

<P><STRONG><a name="[215]"></a>InitiliaiseSPIMemoryDriver</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, memorydriver.o(.text.InitiliaiseSPIMemoryDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InitiliaiseSPIMemoryDriver &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTransmitByte
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryPorts
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
</UL>

<P><STRONG><a name="[21f]"></a>InitiliaiseSPIMemoryPorts</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, memoryport.o(.text.InitiliaiseSPIMemoryPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = InitiliaiseSPIMemoryPorts &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPIChipSelectPin
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryDriver
</UL>

<P><STRONG><a name="[220]"></a>InputHandler</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, dig_ip_handler.o(.text.InputHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InputHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>IsChargerConnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bat_port.o(.text.IsChargerConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsChargerConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryStateHandler
</UL>

<P><STRONG><a name="[107]"></a>IsChargingFull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bat_port.o(.text.IsChargingFull))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryStateHandler
</UL>

<P><STRONG><a name="[22d]"></a>Is_Gps_Valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gps_api.o(.text.Is_Gps_Valid))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[221]"></a>Led_State_Handler</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, led_api.o(.text.Led_State_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Led_State_Handler &rArr; Toggle_led &rArr; Led_State_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_OFF
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_ON
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_led
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>Led_State_OFF</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led_port.o(.text.Led_State_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_State_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_Handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_led
</UL>

<P><STRONG><a name="[222]"></a>Led_State_ON</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led_port.o(.text.Led_State_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Led_State_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_Handler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_led
</UL>

<P><STRONG><a name="[20e]"></a>MX_DMA_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bat_port.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBatteryConfig
</UL>

<P><STRONG><a name="[269]"></a>MX_GPIO_Init</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, main.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>MX_IWDG_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iwdg.o(.text.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>MakeHttpHeader</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, ais_app.o(.text.MakeHttpHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = MakeHttpHeader &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdFrmMemForAppFile
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendPacket
</UL>

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>PacketGetImeiCcid</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, packet_api.o(.text.PacketGetImeiCcid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PacketGetImeiCcid &rArr; GetCCIDNumber &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCCIDNumber
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEINumber
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCcidImeiRespCb
</UL>

<P><STRONG><a name="[227]"></a>PacketHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, packet_api.o(.text.PacketHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = PacketHandler &rArr; PacketTask &rArr; checkWhetherToPacketSendOrSave &rArr; AISGetPacketChecksum &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>PacketHandlerStatesInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, packet_api.o(.text.PacketHandlerStatesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PacketHandlerStatesInit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitStart
</UL>

<P><STRONG><a name="[228]"></a>PacketTask</STRONG> (Thumb, 592 bytes, Stack size 88 bytes, packet_api.o(.text.PacketTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = PacketTask &rArr; checkWhetherToPacketSendOrSave &rArr; AISGetPacketChecksum &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalInputStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsNetworkRegistered
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gsm_time
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_time
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_time
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyInfo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumPacketsInMem
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetModemState
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetStateIsReady
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGsmGpsDataForPacketing
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetRemainingTagCnt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidEpcDataMonitorHandler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpsLEDState
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidReaderSendState
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRfidReadTagStatus
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSerialPwrKeyState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_time
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gps_time
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Gps_Valid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketHandler
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>PrepareDebugSms</STRONG> (Thumb, 424 bytes, Stack size 224 bytes, ais_app.o(.text.PrepareDebugSms))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = PrepareDebugSms &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIMEI
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGprsIsActive
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSupplyInfo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdFrmMemForAppFile
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Gps_Valid
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsDataForPacketing
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[1bc]"></a>ProcessCSQData</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gsm_utility.o(.text.ProcessCSQData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcessCSQData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pucUTL_eSearchChar_Exe
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMStrPrefixMatch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSignalStrengthRespCb
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmRSSIRespCb
</UL>

<P><STRONG><a name="[23a]"></a>ProcessSockResp</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, ais_app.o(.text.ProcessSockResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ProcessSockResp &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMStrPrefixMatch
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketGetAvlData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
</UL>

<P><STRONG><a name="[23b]"></a>PvtSendHandler</STRONG> (Thumb, 768 bytes, Stack size 24 bytes, ais_app.o(.text.PvtSendHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = PvtSendHandler &rArr; SocketResponseHandler &rArr; ProcessSockResp &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmClearSockUrcStatus
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCloseHttpSocket
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSockUrcStatus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSockGetWriteState
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketIsOpened
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetSockCloseFlag
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSockCloseFlagStatus
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmReadHttpSocket
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsReadSockUrcRcvd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmClearReadSockUrc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGprsIsActive
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendSetState
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetSetState
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24a]"></a>PvtSendPacket</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ais_app.o(.text.PvtSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = PvtSendPacket &rArr; MakeHttpHeader &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendSetState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHttpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
</UL>

<P><STRONG><a name="[249]"></a>PvtSendSetState</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, ais_app.o(.text.PvtSendSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PvtSendSetState &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmClearSockUrcStatus
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmClearReadSockUrc
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendPacket
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
</UL>

<P><STRONG><a name="[144]"></a>QbootBackupGetCrc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, qboot.o(.text.QbootBackupGetCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QbootBackupGetCrc &rArr; Crc16Get
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16Get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[141]"></a>QbootCheckUpdateRequired</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, qboot.o(.text.QbootCheckUpdateRequired))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = QbootCheckUpdateRequired &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16Get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[149]"></a>QbootFlashBackupOpen</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, qboot_port.o(.text.QbootFlashBackupOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = QbootFlashBackupOpen &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetError
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[142]"></a>QbootFlashBackupWrite</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, qboot_port.o(.text.QbootFlashBackupWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = QbootFlashBackupWrite &rArr; QbootFlashWrite &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashWrite
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[24f]"></a>QbootFlashWrite</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, qboot_port.o(.text.QbootFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = QbootFlashWrite &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootWriteBackupHeader
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupWrite
</UL>

<P><STRONG><a name="[137]"></a>QbootGetBackUpAPPVer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qboot.o(.text.QbootGetBackUpAPPVer))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaGetProcessResp
</UL>

<P><STRONG><a name="[145]"></a>QbootWriteBackupHeader</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, qboot.o(.text.QbootWriteBackupHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = QbootWriteBackupHeader &rArr; QbootFlashWrite &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
</UL>

<P><STRONG><a name="[1fa]"></a>RTC_EnterInitMode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32g0xx_hal_rtc.o(.text.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1fb]"></a>RTC_ExitInitMode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32g0xx_hal_rtc.o(.text.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[fe]"></a>ReadAdcBatValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bat_port.o(.text.ReadAdcBatValue))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[fd]"></a>ReadAdcSupplyValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bat_port.o(.text.ReadAdcSupplyValue))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[100]"></a>ReadAdcVrefIntValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bat_port.o(.text.ReadAdcVrefIntValue))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[217]"></a>ReadAllConfigParamsFromFlash</STRONG> (Thumb, 1240 bytes, Stack size 32 bytes, mem_config_api.o(.text.ReadAllConfigParamsFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ReadAllConfigParamsFromFlash &rArr; SaveMultipleCopies &rArr; WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleCopies
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMultipleCopies
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
</UL>

<P><STRONG><a name="[253]"></a>ReadBlock</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, memorydriver.o(.text.ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadArray
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteArray
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPacketHeader
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMultipleCopies
</UL>

<P><STRONG><a name="[b]"></a>ReadSmsRespCb</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gsm_sms.o(.text.ReadSmsRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ReadSmsRespCb &rArr; GsmGetSenderMobileNo &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSenderMobileNo
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_sms.o(.data.smsCmdList)
</UL>
<P><STRONG><a name="[ff]"></a>ReadTempSensorValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bat_port.o(.text.ReadTempSensorValue))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[16f]"></a>RfidBytesToHex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, serial_rfid_api.o(.text.RfidBytesToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RfidBytesToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFIDData
</UL>

<P><STRONG><a name="[254]"></a>RfidCmdHandlerInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfid_data_handler.o(.text.RfidCmdHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RfidCmdHandlerInit &rArr; InitRfidSerialPort &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidSerialPort
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidInit
</UL>

<P><STRONG><a name="[230]"></a>RfidEpcDataMonitorHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, packet_api.o(.text.RfidEpcDataMonitorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RfidEpcDataMonitorHandler &rArr; GetRFIDData &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetAvailableTagsCnt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFIDData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[255]"></a>RfidGetAvailableTagsCnt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, serial_rfid_api.o(.text.RfidGetAvailableTagsCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfidGetAvailableTagsCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetRemainingTagCnt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidEpcDataMonitorHandler
</UL>

<P><STRONG><a name="[16e]"></a>RfidGetEPCData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial_rfid_api.o(.text.RfidGetEPCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RfidGetEPCData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFIDData
</UL>

<P><STRONG><a name="[231]"></a>RfidGetRemainingTagCnt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, packet_api.o(.text.RfidGetRemainingTagCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RfidGetRemainingTagCnt &rArr; GetRFIDData &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetAvailableTagsCnt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFIDData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[219]"></a>RfidInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial_rfid_api.o(.text.RfidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = RfidInit &rArr; RfidCmdHandlerInit &rArr; InitRfidSerialPort &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidPwrThValues
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCmdHandlerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPacketConfig
</UL>

<P><STRONG><a name="[20a]"></a>RfidUartMspPortInit</STRONG> (Thumb, 108 bytes, Stack size 120 bytes, serial_rfid_port.o(.text.RfidUartMspPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RfidUartMspPortInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[51]"></a>RfidUartReceiveDataCb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfid_data_handler.o(.text.RfidUartReceiveDataCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RfidUartReceiveDataCb &rArr; RingBufferFill
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfid_data_handler.o(.text.RfidCmdHandlerInit)
</UL>
<P><STRONG><a name="[182]"></a>RingBufferDrain</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ring_buffer.o(.text.RingBufferDrain))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBufferDrain
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaResponseHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResponseHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketRead
</UL>

<P><STRONG><a name="[184]"></a>RingBufferFill</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ring_buffer.o(.text.RingBufferFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufferFill
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartReceiveDataCb
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialDataRcvCb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadFixedLenCb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsUartReceiveDataCb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUartReceiveDataCb
</UL>

<P><STRONG><a name="[1cc]"></a>RingBufferGetAvlLen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ring_buffer.o(.text.RingBufferGetAvlLen))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketGetAvlData
</UL>

<P><STRONG><a name="[f7]"></a>RingBufferInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ring_buffer.o(.text.RingBufferInit))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisDebugInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmAtHandlerInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketGet
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsRingBuffInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidCmdHandlerInit
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[14a]"></a>SendSMS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gsm_sms.o(.text.SendSMS))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaSetState
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
</UL>

<P><STRONG><a name="[236]"></a>SendSinglePacketProcess</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, packet_api.o(.text.SendSinglePacketProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = SendSinglePacketProcess &rArr; WritePacketToMem &rArr; EraseNextBlockIfReqd &rArr; EraseBlockContainingHeader &rArr; ReadPacketHeader &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSentPacket
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePacketToMem
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendSetState
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPvtSendState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendPacket
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetSetState
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[9]"></a>SendSmsRespCb</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, gsm_sms.o(.text.SendSmsRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SendSmsRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartSendData
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUartSendByte
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_sms.o(.data.smsCmdList)
</UL>
<P><STRONG><a name="[1b6]"></a>SetGprs0SimConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mem_config_api.o(.text.SetGprs0SimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SetGprs0SimConfig &rArr; SaveMultipleCopies &rArr; WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMultipleCopies
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[1b4]"></a>SetIntervals</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mem_config_api.o(.text.SetIntervals))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SetIntervals &rArr; SaveMultipleCopies &rArr; WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMultipleCopies
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[1b9]"></a>SetPowerResetModemFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_idle_task.o(.text.SetPowerResetModemFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[1b2]"></a>SetServer0Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mem_config_api.o(.text.SetServer0Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SetServer0Config &rArr; SaveMultipleCopies &rArr; WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMultipleCopies
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[1b5]"></a>SetVehRegNum</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mem_config_api.o(.text.SetVehRegNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SetVehRegNum &rArr; SaveMultipleCopies &rArr; WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMultipleCopies
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[22f]"></a>Set_RTC_time</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, rtc_port.o(.text.Set_RTC_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Set_RTC_time &rArr; HAL_RTC_SetDate &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[103]"></a>Set_batteryLEDState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_api.o(.text.Set_batteryLEDState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_batteryLEDState
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[152]"></a>Set_gprsLEDState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led_api.o(.text.Set_gprsLEDState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_gprsLEDState
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMLedStatusCb
</UL>

<P><STRONG><a name="[22e]"></a>Set_gpsLEDState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_api.o(.text.Set_gpsLEDState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_gpsLEDState
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGsmGpsDataForPacketing
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[a]"></a>SmsOkRespCb</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gsm_sms.o(.text.SmsOkRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SmsOkRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gsm_sms.o(.data.smsCmdList)
<LI> gsm_sms.o(.data.smsReadList)
</UL>
<P><STRONG><a name="[3d]"></a>SmsReceiveCb</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ais_app.o(.text.SmsReceiveCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = SmsReceiveCb &rArr; GsmProcessSmsConfigCmd &rArr; PrepareDebugSms &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSMS
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaStartFromFtp
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendSMS
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmDeleteSMS
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ais_app.o(.text.AisAppInit)
</UL>
<P><STRONG><a name="[244]"></a>SocketResponseHandler</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, ais_app.o(.text.SocketResponseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SocketResponseHandler &rArr; ProcessSockResp &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeSpent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketRead
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSockResp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
</UL>

<P><STRONG><a name="[25d]"></a>SpiReceiveByte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memoryport.o(.text.SpiReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
</UL>

<P><STRONG><a name="[128]"></a>SpiTransmitByte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, memoryport.o(.text.SpiTransmitByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpiTransmitByte &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryDriver
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteByte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlock
</UL>

<P><STRONG><a name="[c]"></a>SslOkRespCb</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gsm_ssl_config.o(.text.SslOkRespCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SslOkRespCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_ssl_config.o(.data.sslConfigCmdList)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g0xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[25f]"></a>SystemClock_Config</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>TimeSpent</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, qtimespent.o(.text.TimeSpent))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaResponseHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_Handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResponseHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketCloseHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketReadHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketWriteHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketOpenHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketHandler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwInfo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwOperator
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollNwTime
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollReceivedSMS
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmIsTimeToPollSignalStrength
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDeactivationHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsActivationHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmStateMachineHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmCheckRegistrationHandler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketResponseHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[fc]"></a>TriggerSupplyADC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bat_port.o(.text.TriggerSupplyADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TriggerSupplyADC &rArr; HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[1c0]"></a>TurnOffGsmPowerRegulatorSwitch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_port.o(.text.TurnOffGsmPowerRegulatorSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TurnOffGsmPowerRegulatorSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
</UL>

<P><STRONG><a name="[1c1]"></a>TurnOnGsmPowerRegulatorSwitch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsm_port.o(.text.TurnOnGsmPowerRegulatorSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TurnOnGsmPowerRegulatorSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmResetPowerSetState
</UL>

<P><STRONG><a name="[208]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32g0xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[209]"></a>UART_CheckIdleState</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32g0xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[207]"></a>UART_SetConfig</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, stm32g0xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[20b]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32g0xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2f]"></a>USART2_LPUART2_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gps_port.o(.text.USART2_LPUART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_LPUART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART3_4_5_6_LPUART1_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32g0xx_it.o(.text.USART3_4_5_6_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_4_5_6_LPUART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g0b1xx.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>UpdateSimApn</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gsm_gprs_api.o(.text.UpdateSimApn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UpdateSimApn &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryOpsCb
</UL>

<P><STRONG><a name="[5c]"></a>UrcCallReadyCb</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gsm_urc_api.o(.text.UrcCallReadyCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UrcCallReadyCb
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitUpdateModuleReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[5e]"></a>UrcCfunCb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsm_urc_api.o(.text.UrcCfunCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UrcCfunCb &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitFunctionalityNotReady
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitFunctionalityReady
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[5d]"></a>UrcCpinCb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gsm_urc_api.o(.text.UrcCpinCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UrcCpinCb &rArr; GsmSetState &rArr; GsmSslConfigStart &rArr; DebugLogPrintString &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSetState
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitUpdateSimNotReady
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInitUpdateSimReady
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGetSimStateByName
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[65]"></a>UrcGprsDeactiveCb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_gprs_api.o(.text.UrcGprsDeactiveCb))
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[61]"></a>UrcGprsRegistrationCb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsm_urc_api.o(.text.UrcGprsRegistrationCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UrcGprsRegistrationCb &rArr; GsmUpdateGprsRegistration &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateGprsRegistration
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[60]"></a>UrcGsmRegistrationCb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsm_urc_api.o(.text.UrcGsmRegistrationCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UrcGsmRegistrationCb &rArr; GsmUpdateNetworkRegistration &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateNetworkRegistration
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[5f]"></a>UrcSmsCb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gsm_sms.o(.text.UrcSmsCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UrcSmsCb &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[5b]"></a>UrcSmsReadyCb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gsm_urc_api.o(.text.UrcSmsReadyCb))
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[63]"></a>UrcUnsecuredS0ClosedCb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.UrcUnsecuredS0ClosedCb))
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[64]"></a>UrcUnsecuredS1ClosedCb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gsm_socket_api.o(.text.UrcUnsecuredS1ClosedCb))
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[62]"></a>UrcUnsecuredSocketReadCb</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, gsm_socket_api.o(.text.UrcUnsecuredSocketReadCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UrcUnsecuredSocketReadCb &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[66]"></a>UrcVoltageMonitorCb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gsm_urc_api.o(.text.UrcVoltageMonitorCb))
<BR>[Address Reference Count : 1]<UL><LI> gsm_urc_api.o(.rodata.gsmURCResponsePrefixEntry)
</UL>
<P><STRONG><a name="[163]"></a>Verify_Checksum</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gps_port.o(.text.Verify_Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Verify_Checksum &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[129]"></a>WaitIfFlashBusy</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, memorydriver.o(.text.WaitIfFlashBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartTime
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReceiveByte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitiliaiseSPIMemoryDriver
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteByte
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlock
</UL>

<P><STRONG><a name="[258]"></a>WriteBlock</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, memorydriver.o(.text.WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteArray
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitIfFlashBusy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePacketToMem
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMultipleCopies
</UL>

<P><STRONG><a name="[259]"></a>WritePacketToMem</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mem_packet_api.o(.text.WritePacketToMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WritePacketToMem &rArr; EraseNextBlockIfReqd &rArr; EraseBlockContainingHeader &rArr; ReadPacketHeader &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteByte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNextBlockIfReqd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
</UL>

<P><STRONG><a name="[233]"></a>checkWhetherToPacketSendOrSave</STRONG> (Thumb, 956 bytes, Stack size 552 bytes, packet_api.o(.text.checkWhetherToPacketSendOrSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = checkWhetherToPacketSendOrSave &rArr; AISGetPacketChecksum &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetSetState
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AISGetPacketChecksum
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexCellIDDataForPacket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPacketTypeString
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetStateIsReady
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[165]"></a>decimal_to_hexadecimal</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, gsm_utility.o(.text.decimal_to_hexadecimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = decimal_to_hexadecimal &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexCellIDDataForPacket
</UL>

<P><STRONG><a name="[136]"></a>ftpGetFileDwnldErrorCode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsm_ftp_api.o(.text.ftpGetFileDwnldErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaGetProcessResp
</UL>

<P><STRONG><a name="[15c]"></a>getGPRSmemconfig</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsm_gprs_api.o(.text.getGPRSmemconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getGPRSmemconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprs0SimConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllMemoryConfigurations
</UL>

<P><STRONG><a name="[232]"></a>getGsmGpsDataForPacketing</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, packet_api.o(.text.getGsmGpsDataForPacketing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getGsmGpsDataForPacketing &rArr; Set_gpsLEDState
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNeighbouringCellInfo
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetServingNeighCellInfo
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gpsLEDState
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsDataForPacketing
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[238]"></a>getIMEI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsm_init_cmd.o(.text.getIMEI))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
</UL>

<P><STRONG><a name="[7]"></a>getIgnitionPinState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, digio_port.o(.text.getIgnitionPinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getIgnitionPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> digio_api.o(.data.inputHandle)
</UL>
<P><STRONG><a name="[22b]"></a>getRfidReadTagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_rfid_api.o(.text.getRfidReadTagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[8]"></a>getSwitchEnablePinState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, digio_port.o(.text.getSwitchEnablePinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSwitchEnablePinState
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> digio_api.o(.data.inputHandle)
</UL>
<P><STRONG><a name="[162]"></a>m_atoh</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lib_api.o(.text.m_atoh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = m_atoh &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = main &rArr; PacketHandler &rArr; PacketTask &rArr; checkWhetherToPacketSendOrSave &rArr; AISGetPacketChecksum &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSwitchPinToOutPut
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalInputStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FotaHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaResponseHandler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_Handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisAppInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDigitalIOConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVersionPrint
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisDebugInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[247]"></a>packetSetState</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, packet_api.o(.text.packetSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = packetSetState &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PvtSendHandler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSinglePacketProcess
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
</UL>

<P><STRONG><a name="[235]"></a>packetStateIsReady</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, packet_api.o(.text.packetStateIsReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packetStateIsReady
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSocketIsOpened
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmGprsIsActive
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkWhetherToPacketSendOrSave
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[1ba]"></a>pucUTL_eSearchChar_Exe</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gsm_common.o(.text.pucUTL_eSearchChar_Exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pucUTL_eSearchChar_Exe
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCSQData
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmQueryOpsCb
</UL>

<P><STRONG><a name="[1b8]"></a>resetMemory</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mem_packet_api.o(.text.resetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = resetMemory &rArr; GetWriteIndex &rArr; ReadPacketHeader &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWatchdog
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSizeOfPacket
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWriteIndex
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmProcessSmsConfigCmd
</UL>

<P><STRONG><a name="[3e]"></a>serialDataRcvCb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ais_app.o(.text.serialDataRcvCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serialDataRcvCb &rArr; RingBufferFill
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_log.o(.text.DebugLogInit)
</UL>
<P><STRONG><a name="[cd]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[bc]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[26a]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[26c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[dc]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[26d]"></a>__mathlib_tofloat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[e1]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
</UL>

<P><STRONG><a name="[272]"></a>_dgr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._fgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[274]"></a>_fgr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fcmp.o(i._fgr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._fleq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryHandler
</UL>

<P><STRONG><a name="[276]"></a>_fleq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fcmp.o(i._fleq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[93]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[11b]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNmeaToDecimal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpsData
</UL>

<P><STRONG><a name="[112]"></a>difftime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, difftime.o(i.difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = difftime &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_time
</UL>

<P><STRONG><a name="[26e]"></a>frexp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = frexp &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[271]"></a>ldexp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ldexp &rArr; __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[38]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[27a]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[273]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dgef.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[27b]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[275]"></a>_fcmpge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fgef.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[2bf]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[277]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[6c]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[c2]"></a>_scanf_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[db]"></a>_scanf_hex_real</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[da]"></a>_scanf_infnan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g0xx_hal_adc.o(.text.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[4e]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g0xx_hal_adc.o(.text.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[4f]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32g0xx_hal_adc.o(.text.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g0xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[1ed]"></a>FLASH_Program_Fast</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32g0xx_hal_flash.o(.text.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[120]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1ea]"></a>DMA_SetConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g0xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[204]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[257]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, stm32g0xx_hal_spi.o(.text.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[256]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32g0xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[203]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32g0xx_hal_spi.o(.text.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[205]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32g0xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
</UL>

<P><STRONG><a name="[252]"></a>SaveMultipleCopies</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mem_config_api.o(.text.SaveMultipleCopies))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SaveMultipleCopies &rArr; WriteBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVehRegNum
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprs0SimConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServer0Config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntervals
</UL>

<P><STRONG><a name="[250]"></a>ReadMultipleCopies</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mem_config_api.o(.text.ReadMultipleCopies))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ReadMultipleCopies &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlock
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllConfigParamsFromFlash
</UL>

<P><STRONG><a name="[12d]"></a>ReadPacketHeader</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mem_packet_api.o(.text.ReadPacketHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ReadPacketHeader &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNextBlockIfReqd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWriteIndex
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlockContainingHeader
</UL>

<P><STRONG><a name="[12c]"></a>EraseBlockContainingHeader</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mem_packet_api.o(.text.EraseBlockContainingHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = EraseBlockContainingHeader &rArr; ReadPacketHeader &rArr; ReadBlock &rArr; WaitIfFlashBusy &rArr; SpiReceiveByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPacketHeader
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock4KB
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNextBlockIfReqd
</UL>

<P><STRONG><a name="[111]"></a>Compare_time</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, packet_api.o(.text.Compare_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Compare_time &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketTask
</UL>

<P><STRONG><a name="[24c]"></a>GetPage</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, qboot_port.o(.text.GetPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetPage
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QbootFlashBackupOpen
</UL>

<P><STRONG><a name="[1ae]"></a>GsmProcessSmsConfigCmd</STRONG> (Thumb, 1912 bytes, Stack size 232 bytes, ais_app.o(.text.GsmProcessSmsConfigCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = GsmProcessSmsConfigCmd &rArr; PrepareDebugSms &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprs0SimConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsConfigsFromMem
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugLogPrintString
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmUpdateIpPort
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCCIDNumber
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEINumber
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOperatorNameInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeactGprsWhenIdle
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerResetModemFlag
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMemory
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVehRegNum
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprs0SimConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServer0Config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntervals
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidPwrThValues
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetServer0Config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntervals
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSim1GprsConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlertDetails
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTrackInterval
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIpPort1Details
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdFrmMemForAppFile
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareDebugSms
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnitIdForPacketing
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPacketIntervalVal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmsReceiveCb
</UL>

<P><STRONG><a name="[224]"></a>Toggle_led</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, led_api.o(.text.Toggle_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Toggle_led &rArr; Led_State_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_OFF
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_State_Handler
</UL>

<P><STRONG><a name="[a2]"></a>_tm_carry</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[a7]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a6]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b6]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[39]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>_local_sscanf</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[cc]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[cf]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d8]"></a>_fp_value</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[dd]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bf]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8e]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8f]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c6]"></a>_scanf_int</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c5]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c8]"></a>_scanf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[ca]"></a>_scanf_wctomb</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c7]"></a>_scanf_wstring</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
